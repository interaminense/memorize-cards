{"version":3,"sources":["components/Tag.js","components/Card.js","components/CardGroup.js","components/Cards.js","components/Loading.js","utils/firebase.js","utils/cards.js","hocs/Cards.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Tag","_ref","tag","react_default","a","createElement","className","Card","_ref$card","card","title","subtitle","description","tags","map","_ref2","index","value","components_Tag","key","settings","arrows","dots","infinite","speed","CardGroup","items","lib_default","item","components_Card","Cards","cards","components_CardGroup","Loading","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","storage","database","auth","getFormattedCards","groups","group","cardId","Object","objectSpread","tagId","find","id","_ref3","WithCards","_useState","useState","loading","_useState2","slicedToArray","state","setState","useEffect","ref","once","then","snapshot","data","val","components_Loading","components_Cards","Header","App","components_Header","hocs_Cards","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cccbc8b7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Tag = ({tag}) => <div className=\"tag\">{tag}</div>;\n\nexport default Tag;","import React from 'react';\nimport Tag from './Tag';\n\nconst Card = ({card: {title, subtitle, description, tags}}) => (\n    <div className=\"card\">\n        <h3 className=\"card-title\">{title}</h3>\n        <small className=\"card-subtitle\">{subtitle}</small>\n        <h1 className=\"card-description\">{description}</h1>\n        \n        <div className=\"card-tags\">\n            {tags.map(({value}, index) => (\n                <Tag tag={value} key={index} />\n            ))}\n        </div>\n    </div>\n);\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport Slider from \"react-slick\";\n\nconst settings = {\n    arrows: false,\n    dots: true,\n    infinite: true,\n    speed: 300\n};\n\nconst CardGroup = ({items}) => (\n    <li className=\"cards-group-item\">\n        <Slider {...settings}>\n            {items.map((item, index) => (\n                <Card card={item} key={index} />\n            ))}\n        </Slider>\n    </li>\n);\n\nexport default CardGroup;","import React from 'react';\nimport CardGroup from './CardGroup';\n\nconst Cards = ({cards}) => (\n    <ul className=\"cards-group\">\n        {cards.map(({items}, index) => (\n            <CardGroup items={items} key={index} />\n        ))}\n    </ul>\n);\n\nexport default Cards;","import React from 'react';\n\nconst Loading = () => (\n\t<div className=\"loading\">{'loading...'}</div>\n);\n\nexport default Loading;","import firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nfirebase.initializeApp(config);\n\nconst storage = firebase.storage();\nconst database = firebase.database();\nconst auth = firebase.auth();\n\nexport { storage, database, auth };","export const getFormattedCards = ({cards, groups, tags}) => (\n    groups.map(group => ({\n        items: group.cards.map(cardId => (\n            cards.map(card => ({\n                ...card,\n                tags: card.tags.map(tagId => (\n                    tags.find(({id}) => id === tagId)\n                ))\n            })).find(({id}) => id === cardId)\n        ))\n    }))\n);","import React, {useEffect, useState} from 'react';\nimport Cards from '../components/Cards';\nimport Loading from '../components/Loading';\nimport {database} from '../utils/firebase';\nimport {getFormattedCards} from '../utils/cards';\n\nconst WithCards = () => {\n    const [state, setState] = useState({cards: [], loading: true})\n\n    useEffect(() => {\n        database.ref().once('value').then(snapshot => {\n            const data = snapshot.val();\n\n            setState({\n                cards: getFormattedCards(data),\n                loading: false\n            })\n        });\n    }, [])\n\n    const {cards, loading} = state;\n\n    return loading ? <Loading /> : <Cards cards={cards} />;\n};\n\nexport default WithCards;","import React from 'react';\n\nconst Header = ({title}) => (\n    <header className=\"header\">\n        {title}\n    </header>\n);\n\nexport default Header;","import React, { Component } from 'react';\nimport WithCards from './hocs/Cards';\nimport Header from './components/Header';\n\nimport './style/main.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title=\"Memorize App\" />\n        <WithCards />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}